// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HashesRepository is an autogenerated mock type for the HashesRepository type
type HashesRepository struct {
	mock.Mock
}

type HashesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *HashesRepository) EXPECT() *HashesRepository_Expecter {
	return &HashesRepository_Expecter{mock: &_m.Mock}
}

// InsertHash provides a mock function with given fields: ctx, hash
func (_m *HashesRepository) InsertHash(ctx context.Context, hash []byte) (bool, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for InsertHash")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (bool, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) bool); ok {
		r0 = rf(ctx, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashesRepository_InsertHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertHash'
type HashesRepository_InsertHash_Call struct {
	*mock.Call
}

// InsertHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash []byte
func (_e *HashesRepository_Expecter) InsertHash(ctx interface{}, hash interface{}) *HashesRepository_InsertHash_Call {
	return &HashesRepository_InsertHash_Call{Call: _e.mock.On("InsertHash", ctx, hash)}
}

func (_c *HashesRepository_InsertHash_Call) Run(run func(ctx context.Context, hash []byte)) *HashesRepository_InsertHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *HashesRepository_InsertHash_Call) Return(_a0 bool, _a1 error) *HashesRepository_InsertHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HashesRepository_InsertHash_Call) RunAndReturn(run func(context.Context, []byte) (bool, error)) *HashesRepository_InsertHash_Call {
	_c.Call.Return(run)
	return _c
}

// NewHashesRepository creates a new instance of HashesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHashesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *HashesRepository {
	mock := &HashesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
