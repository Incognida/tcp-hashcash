// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IPsRepository is an autogenerated mock type for the IPsRepository type
type IPsRepository struct {
	mock.Mock
}

type IPsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IPsRepository) EXPECT() *IPsRepository_Expecter {
	return &IPsRepository_Expecter{mock: &_m.Mock}
}

// HasIP provides a mock function with given fields: ctx, ip
func (_m *IPsRepository) HasIP(ctx context.Context, ip string) (bool, error) {
	ret := _m.Called(ctx, ip)

	if len(ret) == 0 {
		panic("no return value specified for HasIP")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, ip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, ip)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPsRepository_HasIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasIP'
type IPsRepository_HasIP_Call struct {
	*mock.Call
}

// HasIP is a helper method to define mock.On call
//   - ctx context.Context
//   - ip string
func (_e *IPsRepository_Expecter) HasIP(ctx interface{}, ip interface{}) *IPsRepository_HasIP_Call {
	return &IPsRepository_HasIP_Call{Call: _e.mock.On("HasIP", ctx, ip)}
}

func (_c *IPsRepository_HasIP_Call) Run(run func(ctx context.Context, ip string)) *IPsRepository_HasIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IPsRepository_HasIP_Call) Return(_a0 bool, _a1 error) *IPsRepository_HasIP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IPsRepository_HasIP_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *IPsRepository_HasIP_Call {
	_c.Call.Return(run)
	return _c
}

// InsertIP provides a mock function with given fields: ctx, ip
func (_m *IPsRepository) InsertIP(ctx context.Context, ip string) error {
	ret := _m.Called(ctx, ip)

	if len(ret) == 0 {
		panic("no return value specified for InsertIP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ip)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IPsRepository_InsertIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertIP'
type IPsRepository_InsertIP_Call struct {
	*mock.Call
}

// InsertIP is a helper method to define mock.On call
//   - ctx context.Context
//   - ip string
func (_e *IPsRepository_Expecter) InsertIP(ctx interface{}, ip interface{}) *IPsRepository_InsertIP_Call {
	return &IPsRepository_InsertIP_Call{Call: _e.mock.On("InsertIP", ctx, ip)}
}

func (_c *IPsRepository_InsertIP_Call) Run(run func(ctx context.Context, ip string)) *IPsRepository_InsertIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IPsRepository_InsertIP_Call) Return(_a0 error) *IPsRepository_InsertIP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IPsRepository_InsertIP_Call) RunAndReturn(run func(context.Context, string) error) *IPsRepository_InsertIP_Call {
	_c.Call.Return(run)
	return _c
}

// NewIPsRepository creates a new instance of IPsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPsRepository {
	mock := &IPsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
